// 正则表达式验证
let s = /^1000(.[0-9]{0,10})?$/g;
let a = /^[0-1](.[0-9]{1,2})?$/g;

let three = /^(?!1000)[1-9]\d{3}(\.[0-9]{0,10})?$/g; // [1001, 9999]
let listThree = [1000, 1001, 2000,3021.4,3020.1, 9999, 10000];

let four = /^(?!(1|999)$)[1-9]\d{0,2}(\.[0-9]{0,10})?$/g; // [2, 999)
let listfour = [1, 2, 3, 10, 11, 20, 999, 1000];

let five = /^(?!1000)[1-2][0-9][0-9][0-9](\.[0-9]{0,10})?$/g; // [1001, 3000)
let listFive = [1000, 1001, 2000, 2999, 3000, 3001];

// [2, 999) (1001, 9999]
let six = /(^(?!(1|999)$)[1-9]\d{0,2}|(^(?!1000)(?!1001)[1-9]\d{3}))(\.[0-9]{0,10})?$/g
let sixList = [1, 2, 3, 10, 11, 20, 999, 1000, 1001, 2000, 2999, 3000, 3001, 10000]

// [2, 999) (1001, 3000]
let seven = /(^(?!(1|999)$)[1-9]\d{0,2}|(^(?!1000)(?!1001)[1-2][0-9]{3}))(\.[0-9]{0,10})?$/g
let sevenList = [1, 2, 3, 10, 11, 20, 999, 1000, 1001, 2000, 2999, 3000, 3001, 10000]

// [0, 1]
let nine = /(^0(\.[0-9]{1,2})?$)|(^1\.?0{0,2}$)/g
let nineList = ['0', '0.0', '0.00', '0.1', '0.22', '0.8', '0.131', '1', '1.11', '1.00', '1.0', '11', '0.81111']

// 两位小数
let ten = /^\d+(\.[0-9]{0,2})?$/;
let tenList = ['1.11', '1.222', '0', '1231', '11.1', '是中'];

let testMap = {
  // (0-1] 小数点4位
  0: {
    pattern: /^0\.[0-9]{0,4}$/,
    testList: ['1.11', '1.222', '0', '0.1', '0.2', '是中', '0.123', '0.1892389173']
  },
  // 负数
  1: {
    pattern: /^-\d+$/,
    testList: [-1, 0, 1, 2, 3, 4.55]
  },
  // 保留最多两位小数的百分比
  2: {
    pattern: /^\d+\.?\d{0,2}%$/,
    testList: ['-1%', '0', '1', '2', '3', '4.55', '0.01%']
  },
  // 大于等于 0 的整数
  3: {
    pattern: /^\d+$/,
    testList: [-1, 0, 1, 2, 3, 4.55]
  },
  // 大于 0 的整数
  4: {
    pattern: /^\+?[1-9]\d*$/,
    testList: [-1, 0, 1, 2, 3, 4.55]
  },
  // 小于等于0 的整数
  5: {
    pattern: /^-[1-9]\d*|0$/,
    testList: [-1, 0, -1.11,-2, 3, 4.55]
  },
}

let index = 5;
let pattern = testMap[index].pattern;
let testList = testMap[index].testList;
testList.forEach(item => {
  let res = pattern.test(item.toString());
  console.log(res);
})